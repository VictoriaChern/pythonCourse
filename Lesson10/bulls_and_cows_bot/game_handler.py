from telegram.ext import (
    Filters,
    CommandHandler,
    MessageHandler,
    ConversationHandler
)
from settings import WORDS
import random

def start_command_callback(update, context):
    rand = random.randint(0,len(WORDS))
    secret_word = WORDS[rand]
    context.user_data['secret_word'] = secret_word
    update.message.reply_text(f'–ù–∞—á–∞–ª–∞—Å—å –ò–≥—Ä–∞!\n\
        –Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ –∏–∑ {len(secret_word)} –±—É–∫–≤. –û—Ç–≥–∞–¥–∞–π –µ–≥–æ!')
    update.message.reply_text('–¢–≤–æ–π —Ö–æ–¥')
    return EXPECT_PLAYER_ANSWER

def player_turn_callback(update, context):
    answer = update.message.text.lower()
    secret_word = context.user_data['secret_word']
    len_secret_word = len(secret_word)
    if(not validate_player_answer(answer, len_secret_word)):
        update.message.reply_text(f'–û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ {len_secret_word} –±—É–∫–≤')
        return EXPECT_PLAYER_ANSWER
    bulls = 0
    cows = 0
    for i,a in enumerate(secret_word):
        for j,b in enumerate(answer):
            if(a == b and i == j):
                bulls += 1
            elif(a == b):
                cows += 1
    update.message.reply_text(f'{answer}: {bulls} –±—ã–∫–æ–≤, {cows} –∫–æ—Ä–æ–≤')
    if(len_secret_word == bulls):
        update.message.reply_text(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!ü•≥ –í—ã –æ—Ç–≥–∞–¥–∞–ª–∏! –≠—Ç–æ —Å–ª–æ–≤–æ - "{secret_word}"')
        return ConversationHandler.END
    update.message.reply_text('–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥')
    return EXPECT_PLAYER_ANSWER

def validate_player_answer(answer, length):
    if(len(answer) != length):
        return False
    if(not answer.isalpha()):
        return False
    return True

def cancel_callback(update, context):
    update.message.reply_text('–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞')
    return ConversationHandler.END

EXPECT_PLAYER_ANSWER = 0

GAME_HANDLER = ConversationHandler(
    entry_points=[CommandHandler('start', start_command_callback)],
    states={
        EXPECT_PLAYER_ANSWER : [MessageHandler(Filters.text & (~Filters.command), player_turn_callback)]
    },
    fallbacks=[CommandHandler('cancel', cancel_callback)]
)